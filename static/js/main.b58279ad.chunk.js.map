{"version":3,"sources":["components/Header.js","components/BookTable.js","components/DisplayBoard.js","components/CreateBook.js","services/BookService.js","services/TodoService.js","components/FetchTodo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","BookTable","books","length","map","book","index","key","category","author","DisplayBoard","numberOfBooks","getAllBook","onClick","CreateBook","onChangeForm","handleSubmit","type","onChange","e","name","placeholder","getAllBooks","a","fetch","response","json","createBook","data","console","log","method","headers","body","JSON","stringify","getAllTodos","createTodo","FetchButton","App","useState","bookShelf","setBookShelf","setBooks","setNumberBooks","inputData","target","value","event","preventDefault","then","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b58279ad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return(\r\n        <div className='header-wrap'>\r\n            <div className=\"header\">\r\n                <h1>mini codestates</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nconst BookTable = ({books}) => {\r\n\r\n    if (books.length === 0) return null;\r\n\r\n    return(\r\n        <div className=\"table-wrapper\">\r\n            <div className=\"table-box\">\r\n                <h2>My Books</h2>\r\n                <div className=\"table-scroll\">\r\n                    <table>\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Id</th>\r\n                            <th>Book</th>\r\n                            <th>Category</th>\r\n                            <th>Author</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {books.map((book,index) => {\r\n                                return (\r\n                                    <tr key = {index} className={index%2 === 0?'odd':'even'}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{book.book}</td>\r\n                                        <td>{book.category}</td>\r\n                                        <td>{book.author}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BookTable;","import React from 'react'\r\n\r\nconst DisplayBoard = ({numberOfBooks, getAllBook}) => {\r\n    \r\n    return(\r\n        <div className=\"display-wrapper\">\r\n            <div className=\"display-box\">\r\n                <div className=\"display-board\">\r\n                    <h4>생성된 수</h4>\r\n                    <div className=\"number\">\r\n                    {numberOfBooks}\r\n                    </div>\r\n                </div>\r\n                <div className=\"get-button\">\r\n                    <button onClick={() => getAllBook()}>Get all Books</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DisplayBoard;","import React from 'react';\r\n\r\n\r\nconst CreateBook = ({ onChangeForm, handleSubmit }) => {\r\n\r\n\r\n    return(\r\n        <div className=\"form-wrapper\">\r\n            <div className=\"form\">\r\n                <form>\r\n                    <div className=\"input-group\">\r\n                        <label>book</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            onChange={(e) => onChangeForm(e)} \r\n                            name=\"book\" \r\n                            placeholder=\"book\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <label>category</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            onChange={(e) => onChangeForm(e)} \r\n                            name=\"category\" \r\n                            placeholder=\"category\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"input-group\">\r\n                        <label>author</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            onChange={(e) => onChangeForm(e)} \r\n                            name=\"author\"\r\n                            placeholder=\"author\" \r\n                        />\r\n                    </div>\r\n                    <button \r\n                        className=\"submit-button\"\r\n                        onClick= {(e) => handleSubmit(e)}\r\n                    >Submit\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateBook;","\r\nexport const getAllBooks = async () => {\r\n\r\n    const response = await fetch('/api/books')\r\n    // .then((res)=> console.log(res.json()));\r\n    // await fetch('/api/books')\r\n    // .then(res => console.log(res))\r\n    // console.log(await response.json())\r\n    return await response.json();\r\n}\r\n\r\nexport const createBook = async (data) => {\r\n    console.log(data)\r\n    const response = await fetch('/api/book', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({book: data})\r\n      }\r\n    //   .then((res)=>console.log(res)) \r\n      )\r\n    return await response.json();\r\n}","export const getAllTodos = async () => {\r\n\r\n    const response = await fetch('/api2/todos')\r\n    // .then((res)=> console.log(res.json()));\r\n    // await fetch('/api/books')\r\n    // .then(res => console.log(res))\r\n    console.log(await response.json())\r\n    // return await response.json();\r\n}\r\n\r\nexport const createTodo = async (data) => {\r\n    console.log(data)\r\n    const response = await fetch('/api2/todo', {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        body: JSON.stringify({book: data})\r\n      }\r\n    //   .then((res)=>console.log(res)) \r\n      )\r\n    // return await response.json();\r\n}\r\n\r\n///api2/todos","import React from 'react'\r\nimport { getAllTodos, createTodo} from '../services/TodoService';\r\n\r\nconst FetchButton = () => {\r\n    \r\n    return(\r\n        <div className=\"display-wrapper\">\r\n            <button onClick={() => {getAllTodos()}}>Get Todos</button>\r\n            <button onClick={() => {createTodo()}}>Create Todo</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FetchButton;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport BookTable from './components/BookTable';\r\nimport DisplayBoard from './components/DisplayBoard';\r\nimport CreateBook from './components/CreateBook';\r\nimport { getAllBooks, createBook } from './services/BookService';\r\nimport Footer from './components/Footer';\r\nimport FetchButton from './components/FetchTodo';\r\n\r\nfunction App () {\r\n\r\n  const [bookShelf, setBookShelf] = useState({});\r\n  const [books, setBooks] = useState([]);\r\n  const [numberOfBooks, setNumberBooks] = useState(0);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n      createBook(bookShelf)\r\n        .then(() => {\r\n          setNumberBooks(numberOfBooks+1);\r\n      });\r\n  }\r\n\r\n  const getAllBook = () => {\r\n    getAllBooks()\r\n      .then(data => {\r\n        setBooks(data);\r\n        setNumberBooks(data.length);\r\n      });\r\n  }\r\n\r\n  const handleOnChangeForm = (e) => {\r\n      let inputData = bookShelf;\r\n      if (e.target.name === 'book') {\r\n        bookShelf.book = e.target.value;\r\n      } else if (e.target.name === 'category') {\r\n        bookShelf.category = e.target.value;\r\n      } else if (e.target.name === 'author') {\r\n        bookShelf.author = e.target.value;\r\n      }\r\n      setBookShelf(inputData);\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"main-wrapper\">\r\n      <div className=\"main\">\r\n        <Header />\r\n        <CreateBook \r\n          bookShelf={bookShelf}\r\n          onChangeForm={handleOnChangeForm}\r\n          handleSubmit={handleSubmit}\r\n        />\r\n        <DisplayBoard \r\n          numberOfBooks={numberOfBooks} \r\n          getAllBook={getAllBook} \r\n        />\r\n        <BookTable books={books} />\r\n        <FetchButton/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}